:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::

# Curso de Bacharelado em Sistemas de Informação

```{r}
#| label: Configuration R

# --------------------------
# [1] CONFIGURAÇÕES INICIAIS
# --------------------------

# Definir o Diretório do Dados
setwd("~/DETRAN/TRI_PROJECT_DIEGO/")

options(OutDec = ",")

# Pacotes Carregados
library(dplyr)
library(stringr)
library(ggplot2)

library(gt)

# Gabarito oficial da Prova
template.oficial <- c(
  "C", "C", "B", "B", "C", "E", "A", "D", "C", "E", "A", "C", "E", "ANULADA (E)", 
  "A", "D", "B", "B", "B", "E", "B", "D", "D", "B", "B", "E", "A", "E", "A", 
  "C", "B", "D", "C", "C", "C"
)

# Número de Itens
n.itens.FG <- 8
n.itens.CE <- 27
n.itens <- n.itens.FG + n.itens.CE

# Index
index <- c(paste0(1:n.itens.FG, "ª FG"), paste0(1:n.itens.CE, "ª CE"))

# ----------------------------------------------
# [2] CARREGAMENTO E POSSÍVEIS AJUSTES DOS DADOS
# ----------------------------------------------

# Caminho do arquivo.rds
path <- "MICRODADOS_ENADE_2017_LGPD/DADOS_GERAIS_SISTEMAS.rds"

# Leitura do arquivo.rds
SIS.INFO <- readRDS(file = path)

# Ajustes das Colunas de Vetores
SIS.INFO.AUX <- SIS.INFO |> mutate(
  DS_VT_GAB_OFG_FIN_ADJ = strsplit(str_remove_all(DS_VT_GAB_OFG_FIN, "[^A-Z]"), ""),
  DS_VT_GAB_OCE_FIN_ADJ = strsplit(str_remove_all(DS_VT_GAB_OCE_FIN, "[^A-Z]"), ""),
  DS_VT_ESC_OFG_ADJ = strsplit(str_remove_all(DS_VT_ESC_OFG, "[^A-Z\\.\\*]"), ""),
  DS_VT_ESC_OCE_ADJ = strsplit(str_remove_all(DS_VT_ESC_OCE, "[^A-Z\\.\\*]"), "")
)
```

## Introdução

## Análise Descritiva dos Itens

## Análise via Teoria Clássica dos Testes (TCT)

### Tabela de Frequência (Absoluta e Relativa) das Alternativas de Respostas

```{r}
#| label: FREQ_ALTERNATIVE_ABSOLUTE_AND_RELATIVE

# ------------------------------------------------
# [3] ANÁLISE VIA TEÓRIA CLÁSSICA DOS TESTES (TCT)
# ------------------------------------------------

# ---------------------------------------------------------
# [3.1] TABELA COM FREQUÊNCIA DAS ALTERNATIVAS DE RESPOSTAS
# ---------------------------------------------------------

# Criando Data Frame de Armazenamento
tbl.freq.FG <- tbl.freq.CE <- data.frame()

# Iteração de preenchimento das informações FG
for (k in 1:n.itens.FG) {
  # Distribuição de Frequências para k-ésima resposta
  frequencys <- table(sapply(SIS.INFO.AUX$DS_VT_ESC_OFG_ADJ, `[`, k))
  
  # Total de válidas
  valid <- sum(frequencys[LETTERS[1:5]])
  
  # Contagem de brancos (se resposta em branco ".")
  blank <- as.numeric(frequencys["."])
  
  # Contagem de múltiplas respostas (ex: "*")
  multiple <- as.numeric(frequencys["*"])
  
  # Atualiza o Data Frame que armazena as informações
  tbl.freq.FG <- bind_rows(
    tbl.freq.FG,
    data.frame(
      Gabarito = template.oficial[k],
      Branco = blank,
      Multiples = multiple,
      A = frequencys["A"],
      B = frequencys["B"],
      C = frequencys["C"],
      D = frequencys["D"],
      E = frequencys["E"],
      Valids = valid
    )
  )
}

# Iteração de preenchimento das informações
for (k in 1:n.itens.CE) {
  # Distribuição de Frequências para k-ésima resposta
  frequencys <- table(sapply(SIS.INFO.AUX$DS_VT_ESC_OCE_ADJ, `[`, k))
  
  # Total de válidas
  valid <- sum(frequencys[LETTERS[1:5]])
  
  # Contagem de brancos (se resposta em branco ".")
  blank <- as.numeric(frequencys["."])
  
  # Contagem de múltiplas respostas (ex: "*")
  multiple <- as.numeric(frequencys["*"])
  
  # Ajuste do índice
  k.adj <- k + 8
  
  # Atualiza o Data Frame que armazena as informações
  tbl.freq.CE <- bind_rows(
    tbl.freq.CE,
    data.frame(
      Gabarito = template.oficial[k.adj],
      Branco = blank,
      Multiples = multiple,
      A = frequencys["A"],
      B = frequencys["B"],
      C = frequencys["C"],
      D = frequencys["D"],
      E = frequencys["E"],
      Valids = valid
    )
  )
}

# Tabela Final
tbl.freq <- bind_rows(tbl.freq.FG, tbl.freq.CE) |>
  mutate(ITEM_ESPEC = index) |>
  select(
    ITEM_ESPEC, Gabarito, Branco, Multiples, 
    A, B, C, D, E, Valids
  ) |>
  `row.names<-`(1:length(index))

# ---------------------------------------
# [3.1.3] TABELA DE FREQUÊNCIAS RELATIVAS
# ---------------------------------------

# Frequências Relativas
tbl.freq_relative <- tbl.freq[, -c(3, 4)]
tbl.freq_relative[, 3:7] <- (tbl.freq_relative[, 3:7] / tbl.freq_relative[, 8]) * 100
tbl.freq_relative[, 8] <- rowSums(tbl.freq_relative[, 3:7])
```

Veja, a seguir, a @tbl-FREQ_ALTERNATIVE_ABS e @tbl-FREQ_ALTERNATIVE_REL. Que mostram, respectivamente, a distribuição de frequências absolutas alternativas às alternativas de resposta.

```{r}
#| tbl-cap: "Frequências das Alternativas de Respostas por Item."
#| label: tbl-FREQ_ALTERNATIVE_ABS

# Tabela com o Pacote gt
gt(tbl.freq) |>
  cols_label(
    ITEM_ESPEC = md("**Item**"),
    Gabarito   = md("**Gabarito**"),
    Branco     = md("**Branco**"),
    Multiples  = md("**Mútiplas**"),
    A          = md("**A**"),
    B          = md("**B**"),
    C          = md("**C**"),
    D          = md("**D**"),
    E          = md("**E**"),
    Valids     = md("**Válidas**")
  ) |>
  cols_align(
    align = "center",
    columns = everything()
  ) |>
  fmt_number(
    columns = 5:10,
    decimals = 0,
    sep_mark = "."
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

```{r}
#| tbl-cap: "Frequências das Alternativas de Respostas por Item."
#| label: tbl-FREQ_ALTERNATIVE_REL

# ---------------------------------------
# [3.1.3.1] TABELA TABELA COM PACOTE gt
# ---------------------------------------

# Tabela com o Pacote gt
gt(tbl.freq_relative) |>
  cols_label(
    ITEM_ESPEC = md("**Item Especificado**"),
    Gabarito   = md("**Gabarito**"),
    A          = md("**A (%)**"),
    B          = md("**B (%)**"),
    C          = md("**C (%)**"),
    D          = md("**D (%)**"),
    E          = md("**E (%)**"),
    Valids     = md("**Total (%)**")
  ) |>
  cols_align(
    align = "center",
    columns = everything()
  ) |>
  fmt_number(
    columns = 3:8,
    decimals = 2,
    dec_mark = ","
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

### Tabela de Proporção de Acertos (%)

```{r}
#| label: PROP_HITS

# ---------------------------------------
# [3.2] TABELA COM A PROPORÇÃO DE ACERTOS
# ---------------------------------------

# Criando Data Frame de Armazenamento
tbl.prop_hit <- data.frame()

for (id in 1:n.itens) {
  # Total Válido
  valid.id <- tbl.freq[["Valids"]][id]
  
  # Extração do Gabarito
  gab <- as.character(tbl.freq |> select(Gabarito) |> slice(id))
  
  # Proporção de Acertos (Verificação)
  if (gab == "ANULADA (E)") {
    # Proporção de Acertos
    prop.hit <- NA
  } else {
    # Proporção de Acertos
    prop.hit <- tbl.freq[[gab]][id] / valid.id
  }
  
  # Atualização das Informações
  tbl.prop_hit <- bind_rows(
    tbl.prop_hit,
    data.frame(
      ITEM_ESPEC = tbl.freq[["ITEM_ESPEC"]][id],
      GABARITO   = gab,
      PROP_HIT   = prop.hit * 100
    )
  )
}
```

Veja, a seguir, a @tbl-PROP_HITS. Que apresenta as proporções de acertos para cada item.

```{r}
#| tbl-cap: "Proporção de Acertos dos Itens."
#| label: tbl-PROP_HITS

# -----------------------------------
# [3.2.1] TABELA TABELA COM PACOTE gt
# -----------------------------------

# Tabela com o Pacote gt
gt(tbl.prop_hit) |>
  cols_label(
    ITEM_ESPEC = md("**Item**"),
    GABARITO   = md("**Gabarito**"),
    PROP_HIT   = md("**Proporção de Acertos (%)**")
  ) |>
  cols_align(
    align = "center",
    columns = everything()
  ) |>
  fmt_number(
    columns = everything(),
    decimals = 2,
    dec_mark = ","
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

### Histograma do Escore em Formação Geral, Componentes Específicos e Total

```{r}
#| label: CALCULE_SCORE

# -----------------------------
# [3.3] HISTOGRAMAS DOS ESCORES
# -----------------------------

# ---------------------------
# [3.3.1] MATRIZ DE RESPOSTAS
# ---------------------------

# Matriz de acertos (0/1) para todos os participantes
matrix.resp <- matrix(NA, nrow = nrow(SIS.INFO.AUX), ncol = n.itens)

# Iteração de Armazenamento
for (k in 1:n.itens.FG) {
  # Extrai a Resposta e o Gabarito do item k e Armezena os Dados
  matrix.resp[, k] <- sapply(SIS.INFO.AUX$DS_VT_ESC_OFG_ADJ, `[`, k)
}

# Iteração de Armazenamento
for (k in 1:n.itens.CE) {
  # Ajuste do índice
  k.adj <- k + 8
  
  # Extrai a Resposta e o Gabarito do item k e Armezena os Dados
  matrix.resp[, k.adj] <- sapply(SIS.INFO.AUX$DS_VT_ESC_OCE_ADJ, `[`, k)
}

# -------------------------
# [3.3.2] MATRIZ DE ACERTOS
# -------------------------

# Matriz de acertos (0/1) para todos os participantes
matrix.hits <- matrix(NA, nrow = nrow(SIS.INFO.AUX), ncol = n.itens)

# Iteração de Armazenamento
for (k in 1:n.itens.FG) {
  # Extrai a Resposta e o Gabarito do item i
  response.item <- sapply(SIS.INFO.AUX$DS_VT_ESC_OFG_ADJ, `[`, k)
  
  # Acertos (Verificação)
  if (template.oficial[k] == "ANULADA (E)") {
    # Acertos
    hits <- NA
    
    # Armezenamento dos Dados
    matrix.hits[, k] <- hits
  } else {
    # Acertos
    hits <- as.integer(response.item == template.oficial[k])
    
    # Armezenamento dos Dados
    matrix.hits[, k] <- hits
  }
}


# Iteração de Armazenamento
for (k in 1:n.itens.CE) {
  # Extrai a Resposta e o Gabarito do item i
  response.item <- sapply(SIS.INFO.AUX$DS_VT_ESC_OCE_ADJ, `[`, k)
  
  # Ajuste do índice
  k.adj <- k + 8

  # Acertos (Verificação)
  if (template.oficial[k.adj] == "ANULADA (E)") {
    # Acertos
    hits <- NA

    # Armezenamento dos Dados
    matrix.hits[, k.adj] <- hits
  } else {
    # Acertos
    hits <- as.integer(response.item == template.oficial[k.adj])

    # Armezenamento dos Dados
    matrix.hits[, k.adj] <- hits
  }
}

# --------------------
# [3.3.3] ESCORE TOTAL
# --------------------

# Escore FG
score.FG <- rowSums(matrix.hits[, 1:n.itens.FG], na.rm = T)

# Escore CE
score.CE <- rowSums(matrix.hits[, (n.itens.FG+1):(n.itens)], na.rm = T)

# Escore Total
score.tot <- rowSums(matrix.hits, na.rm = T)

# ------------------
# [3.3.4] HISTOGRAMA
# ------------------
```

```{r}
#| fig-cap: "Histograma dos Escore dos Participantes em Formação Geral."
#| label: fig-HIST_SCORE_FG

# Histogrma com ggplot2
ggplot(data = NULL) +
  geom_histogram(aes(x = score.FG), bins = n.itens.FG, color = "white", fill = "steelblue") +
  xlim(0, n.itens.FG) +
  labs(x = "Escore", y = "Frequência") +
  theme_classic(base_size = 12) +
  theme(
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )
```

```{r}
#| fig-cap: "Histograma dos Escore dos Participantes em Componentes Específicos."
#| label: fig-HIST_SCORE_CE

# Histogrma com ggplot2
ggplot(data = NULL) +
  geom_histogram(aes(x = score.CE), bins = n.itens.CE, color = "white", fill = "steelblue") +
  xlim(0, n.itens.CE) +
  labs(x = "Escore", y = "Frequência") +
  theme_classic(base_size = 12) +
  theme(
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )
```

```{r}
#| fig-cap: "Histograma dos Escore Total dos Participantes."
#| label: fig-HIST_SCORE_TOTAL

# Histogrma com ggplot2
ggplot(data = NULL) +
  geom_histogram(aes(x = score.tot), bins = n.itens, color = "white", fill = "steelblue") +
  xlim(0, n.itens) +
  labs(x = "Escore", y = "Frequência") +
  theme_classic(base_size = 12) +
  theme(
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )
```

### Proporção de Acertos *versus* Escore por Item

```{r}
#| label: PROP_HITS_AND_SCORE_BY_ITEM

# -------------------------------------
# [3.3] PROPORÇÃO DE ACERTOS POR ESCORE
# -------------------------------------

# Converter para Data Drame
df.hits <- as.data.frame(matrix.hits)

# Nome dos Itens
# index <- index

# Ajustar o nome das colunas com o `index`
colnames(df.hits) <- index

# Adiciona `score_total` à base
df.hits$SCORE <- score.tot

# Função para calcular proporção de acertos por escore para cada item
get.curves_by_item <- function(data, itens_ids) {
  # Data Frame para Armazenar Resultados
  curves <- data.frame()
  
  # Iteração de Obtenção dos Dados
  for (item in itens_ids) {
    curve.by.item <- data |>
      group_by(SCORE) |>
      summarise(
        PROP_HIT = mean(get(item), na.rm = TRUE)
      ) |>
      mutate(ITEM = item)
    
    # Join dos Dados
    curves <- bind_rows(curves, curve.by.item)
  }
  # Retornar os DadoS
  return(curves)
}
```

O objetivo desta análise é avaliar a *Proporção de Acertos* por *Escore* de cada item.

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_1_A_5 apresenta a proporção de acertos por escore para os itens de 1 (1ª FG) a 5 (5ª FG).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 1 (1ª FG) a 5 (5ª FG) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_1_A_5

# ----------------------
# [3.3.1] ITENS DE 1 A 5
# ----------------------

# Itens
itens1 <- 1:5

# Itens de 1 (1ª FG) a 5 (5ª FG)
p1 <- get.curves_by_item(df.hits, index[itens1]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens1[1]], " A ", index[itens1[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p1
print(p1)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_6_A_10 apresenta a proporção de acertos por escore para os itens de 6 (6ª FG) a 10 (2ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 6 (6ª FG) a 10 (2ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_6_A_10

# -----------------------
# [3.3.2] ITENS DE 6 A 10
# -----------------------

# Itens
itens2 <- 6:10

# Itens de 1 (1ª FG) a 5 (5ª FG)
p2 <- get.curves_by_item(df.hits, index[itens2]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens2[1]], " A ", index[itens2[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p2
print(p2)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_11_A_15 apresenta a proporção de acertos por escore para os itens de 11 (3ª CE) a 15 (7ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 11 (3ª CE) a 15 (7ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_11_A_15

# ------------------------
# [3.3.3] ITENS DE 11 A 15
# ------------------------

# Itens
itens3 <- 11:15

# Itens de 1 (1ª FG) a 5 (5ª FG)
p3 <- get.curves_by_item(df.hits, index[itens3]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens3[1]], " A ", index[itens3[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p3
print(p3)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_16_A_20 apresenta a proporção de acertos por escore para os itens de 16 (8ª CE) a 20 (12ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 16 (8ª CE) a 20 (12ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_16_A_20

# ------------------------
# [3.3.4] ITENS DE 16 A 20
# ------------------------

# Itens
itens4 <- 16:20

# Itens de 1 (1ª FG) a 5 (5ª FG)
p4 <- get.curves_by_item(df.hits, index[itens4]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens4[1]], " A ", index[itens4[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p4
print(p4)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_21_A_25 apresenta a proporção de acertos por escore para os itens de 21 (13ª CE) a 25 (17ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 21 (13ª CE) a 25 (17ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_21_A_25

# ------------------------
# [3.3.5] ITENS DE 21 A 25
# ------------------------

# Itens
itens5 <- 21:25

# Itens de 1 (1ª FG) a 5 (5ª FG)
p5 <- get.curves_by_item(df.hits, index[itens5]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens5[1]], " A ", index[itens5[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p5
print(p5)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_26_A_30 apresenta a proporção de acertos por escore para os itens de 26 (18ª CE) a 30 (22ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 26 (18ª CE) a 30 (22ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_26_A_30

# ------------------------
# [3.3.6] ITENS DE 26 A 30
# ------------------------

# Itens
itens6 <- 26:30

# Itens de 1 (1ª FG) a 5 (5ª FG)
p6 <- get.curves_by_item(df.hits, index[itens6]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens6[1]], " A ", index[itens6[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p6
print(p6)
```

A @fig-PROP_HITS_AND_SCORE_BY_ITEM_31_A_35 apresenta a proporção de acertos por escore para os itens de 31 (23ª CE) a 35 (27ª CE).

```{r}
#| fig-cap: "Proporção de Acertos por Escore dos Itens de 31 (23ª CE) a 35 (27ª CE) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PROP_HITS_AND_SCORE_BY_ITEM_31_A_35

# ------------------------
# [3.3.7] ITENS DE 31 A 35
# ------------------------

# Itens
itens7 <- 31:35

# Itens de 1 (1ª FG) a 5 (5ª FG)
p7 <- get.curves_by_item(df.hits, index[itens7]) |>
  ggplot(aes(x = SCORE, PROP_HIT, color = ITEM)) +
  geom_line(size = 1) + geom_point() +
  xlim(0, n.itens) + ylim(0, 1) +
  labs(
    x = "Escore",
    y = "Proporção de Acertos (%)",
    color = paste0("ITENS ", index[itens7[1]], " A ", index[itens7[5]]),
    
  ) +
  theme_classic(base_size = 12) +
  theme(
    legend.position = "right",
    legend.text = element_text(size = 8, face = "bold"),
    legend.title = element_text(size = 10, face = "bold"),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Imprimir p7
print(p7)
```

### Grupos de Desempenho

```{r}
#| label: DIV_GROUP_DISCR

# --------------------------
# [3.5] GRUPOS DE DESEMPENHO
# --------------------------

# Calculando P1 (percentil 33%) e P3 (percentil 67%)
q1 <- quantile(df.hits$SCORE, probs = 1/3, na.rm = TRUE)
q3 <- quantile(df.hits$SCORE, probs = 2/3, na.rm = TRUE)
```


Com base na distribuição dos escores totais, os pontos de corte foram definidos nos percentis 33% ($\approx 1/3$ - PI) e 67% ($\approx 2/3$ - PS). Assim, os participantes foram agrupados em três níveis de desempenho:

* **Grupo 1 (Baixo Desempenho):** pontuação inferior a **`r as.numeric(q1)`**;
* **Grupo 2 (Médio Desempenho):** pontuação entre **`r as.numeric(q1)`** e **`r as.numeric(q3)`**;
* **Grupo 3 (Alto Desempenho):** pontuação maior ou igual a **`r as.numeric(q3)`**.

Essa segmentação é útil para analisar se os itens da prova conseguem diferenciar bem os candidatos (discriminação), além de ajudar a identificar questões que são muito fáceis, muito difíceis ou que não discriminam.

Posteriormente, essa divisão permitirá calcular indicadores como **discriminação clássica** (diferença entre proporções de acerto nos Grupos 3 e 1) e **ponto bisserial**.

Veja a @tbl-DIV_GROUP_DISCR, que apresenta como ficou a divisão dos dados por meio de frequências absolutas e relativas

```{r}
#| tbl-cap: "Frequência dos Grupos de Desempenho da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-DIV_GROUP_DISCR

# Criar variável de Grupo com base nas pontuações
df.hits$GRUPO <- cut(
  df.hits$SCORE,
  breaks = c(-Inf, q1, q3, Inf),
  labels = c("GRUPO 1","GRUPO 2", "GRUPO 3"),
  include.lowest = TRUE,
  right = FALSE
)

# Armazenar os Resultados no Formato de Data Frame
tbl.div_group <- data.frame(
  FREQ = as.numeric(table(df.hits$GRUPO)),
  PERCENT = as.numeric(prop.table(table(df.hits$GRUPO))) * 100
)

# Ajuste do Nome das Linhas
row.names(tbl.div_group) <- str_to_title(c("GRUPO 1","GRUPO 2", "GRUPO 3"))

# Visualizar 
gt(tbl.div_group, rownames_to_stub = T) |>
  cols_label(
    FREQ = md("**Frquência**"), PERCENT = md("**Percentual**")
  ) |>
  fmt_number(columns = FREQ, decimals = 0, sep_mark = ".") |>
  fmt_number(columns = PERCENT, decimals = 2, dec_mark = ",")
```

### Índice de Discriminação Clássico

```{r}
#| label: IND_DISCR_CLAS

#  --------------------------------------------
# [3.6] DISCRIMINAÇÃO DOS GRUPOS DE DESEMPENHO
# --------------------------------------------

# Inicializa tabela
tbl.discrimination.FG <- data.frame()

# Iteração de captura dos dados
for (k in 1:n.itens.FG) {
  # Data Frame Temporário
  temp <- data.frame(
    GRUPO = df.hits$GRUPO,
    RESPOSTA = matrix.resp[, k],
    ACERTO = matrix.hits[, k]
  )
  
  # Proporção de Acertos por Grupo (para Discriminação Clássica)
  hits_by_group <- temp |>
    group_by(GRUPO) |>
    summarise(
      `PROPORÇÃO DE ACERTO` = mean(ACERTO, na.rm = TRUE),
      .groups = "drop"
    ) |>
    tidyr::pivot_wider(names_from = GRUPO, values_from = `PROPORÇÃO DE ACERTO`)
  
  # Frequência relativa por alternativa em cada grupo
  freq_by_group <- temp |>
    filter(RESPOSTA %in% c("A", "B", "C", "D", "E")) |>
    group_by(GRUPO, RESPOSTA) |>
    summarise(FREQ = n(), .groups = "drop") |>
    group_by(GRUPO) |>
    mutate(PROP = round(100 * FREQ / sum(FREQ), 2)) |>
    tidyr::pivot_wider(names_from = RESPOSTA, values_from = PROP) |>
    ungroup()
  
  # Unifica
  row <- data.frame(
    ITEM = index[k],
    
    # GABARITO = tbl.prop_hit$GABARITO[k.adj],
    # 
    # A_G1 = freq_by_group$A[1],
    # B_G1 = freq_by_group$B[2],
    # C_G1 = freq_by_group$C[3],
    # D_G1 = freq_by_group$D[4],
    # E_G1 = freq_by_group$E[5],
    # 
    # A_G2 = freq_by_group$A[6],
    # B_G2 = freq_by_group$B[7],
    # C_G2 = freq_by_group$C[8],
    # D_G2 = freq_by_group$D[9],
    # E_G2 = freq_by_group$E[10],
    # 
    # A_G3 = freq_by_group$A[11],
    # B_G3 = freq_by_group$B[12],
    # C_G3 = freq_by_group$C[13],
    # D_G3 = freq_by_group$D[14],
    # E_G3 = freq_by_group$E[15],
    
    P1 = hits_by_group$`GRUPO 1`,
    P3 = hits_by_group$`GRUPO 3`,
    DISCRIMIN = round(hits_by_group$`GRUPO 3` - hits_by_group$`GRUPO 1`, 4)
  )
  
  # Atualiza a tabela
  tbl.discrimination.FG <- bind_rows(tbl.discrimination.FG, row)
}

# Ajuste para Visualização
tbl.discrimination.FG <- tbl.discrimination.FG |>
  mutate(
    `DISCRIMINAÇÃO` = DISCRIMIN * 100,
    `CLASSIFICAÇÃO` = ifelse(DISCRIMIN < 0.2, "Abaixo de 20%", "Ok")
  ) |>
  select(ITEM, `DISCRIMINAÇÃO`, `CLASSIFICAÇÃO`)

# Visualizar
#tbl.discrimination.FG

# ==============================================================================

# Inicializa tabela
tbl.discrimination.CE <- data.frame()

# Iteração de captura dos dados
for (k in 1:n.itens.CE) {
  # Ajuste do índice
  k.adj <- k + 8
  
  # Data Frame Temporário
  temp <- data.frame(
    GRUPO = df.hits$GRUPO,
    RESPOSTA = matrix.resp[, k.adj],
    ACERTO = matrix.hits[, k.adj]
  )
  
  # Proporção de Acertos por Grupo (para Discriminação Clássica)
  hits_by_group <- temp |>
    group_by(GRUPO) |>
    summarise(
      `PROPORÇÃO DE ACERTO` = mean(ACERTO, na.rm = TRUE),
      .groups = "drop"
    ) |>
    tidyr::pivot_wider(names_from = GRUPO, values_from = `PROPORÇÃO DE ACERTO`)
  
  # Frequência relativa por alternativa em cada grupo
  freq_by_group <- temp |>
    filter(RESPOSTA %in% c("A", "B", "C", "D", "E")) |>
    group_by(GRUPO, RESPOSTA) |>
    summarise(FREQ = n(), .groups = "drop") |>
    group_by(GRUPO) |>
    mutate(PROP = round(100 * FREQ / sum(FREQ), 2)) |>
    tidyr::pivot_wider(names_from = RESPOSTA, values_from = PROP) |>
    ungroup()
  
  # Unifica
  row <- data.frame(
    ITEM = index[k.adj],
    
    # GABARITO = tbl.prop_hit$GABARITO[k],
    # 
    # A_G1 = freq_by_group$A[1],
    # B_G1 = freq_by_group$B[2],
    # C_G1 = freq_by_group$C[3],
    # D_G1 = freq_by_group$D[4],
    # E_G1 = freq_by_group$E[5],
    # 
    # A_G2 = freq_by_group$A[6],
    # B_G2 = freq_by_group$B[7],
    # C_G2 = freq_by_group$C[8],
    # D_G2 = freq_by_group$D[9],
    # E_G2 = freq_by_group$E[10],
    # 
    # A_G3 = freq_by_group$A[11],
    # B_G3 = freq_by_group$B[12],
    # C_G3 = freq_by_group$C[13],
    # D_G3 = freq_by_group$D[14],
    # E_G3 = freq_by_group$E[15],
    
    P1 = hits_by_group$`GRUPO 1`,
    P3 = hits_by_group$`GRUPO 3`,
    DISCRIMIN = round(hits_by_group$`GRUPO 3` - hits_by_group$`GRUPO 1`, 4)
  )
  
  # Atualiza a tabela
  tbl.discrimination.CE <- bind_rows(tbl.discrimination.CE, row)
}

# Ajuste para Visualização
tbl.discrimination.CE <- tbl.discrimination.CE |>
  mutate(
    `DISCRIMINAÇÃO` = DISCRIMIN * 100,
    `CLASSIFICAÇÃO` = ifelse(DISCRIMIN < 0.2, "Abaixo de 20%", "Ok")
  ) |>
  select(ITEM, `DISCRIMINAÇÃO`, `CLASSIFICAÇÃO`)

# Visualizar
#tbl.discrimination.CE

# ==============================================================================

# Juntar as Tabelas de Discriminação
tbl.discrimination <- rbind(tbl.discrimination.FG, tbl.discrimination.CE)
```

Veja a @tbl-IND_DISCR_CLAS que apresenta o *Índice de Discriminação Clássico* com sua classificação de sua quantidade em **"Ok"** e **"Abaixo de 20%"** para itens com problemas.

```{r}
#| tbl-cap: "Índice de Discriminação Clássico dos Itens da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-IND_DISCR_CLAS

# Tabela com o Pacote gt
# Tabela com o Pacote gt
gt(tbl.discrimination) |>
  cols_label(
    ITEM = md("**Item**"),
    `DISCRIMINAÇÃO` = md("**Discriminação**"),
    `CLASSIFICAÇÃO` = md("**Classificação**")
  ) |>
  cols_align(
    align = "center", columns = everything()
  ) |>
  fmt_number(
    columns = everything(),
    decimals = 2,
    dec_mark = ","
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

### Correlação Ponto-Bisserial

```{r}
#| label: CORR_P_BIS

# Inicializa vetor para armazenar os coeficientes
corr.bisserial <- c()

# Iteração
for (k in 1:n.itens) {
  # Item avaliada na k-ésima iteraração
  item_vector <- matrix.hits[, k]
  
  if (k == 14) {
    # Armazena a informação
    corr.bisserial[k] <- NA
  } else {
    # Escore sem o item k
    score_exclude_k <- rowSums(matrix.hits[, -k], na.rm = TRUE)
    
    # Calcula correlação ponto-bisserial (omitindo NAs)
    corr <- cor(item_vector, score_exclude_k, use = "complete.obs")
    
    # Armazena a informação
    corr.bisserial[k] <- corr
  }
}

# Criação da tabela com o resultado
tbl.bisserial <- data.frame(
  ITEM = index,
  CORR_BISSERIAL = corr.bisserial
)
```

Veja a @tbl-CORR_P_BIS que mostra as medidas de correlação ponto-bisserial de cada item.

```{r}
#| tbl-cap: "Correlação Ponto-Bisserial dos Itens com os Escores Totais dos Participantes da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-CORR_P_BIS

# Tabela com o Pacote gt
gt(tbl.bisserial) |>
  cols_label(
    ITEM = md("**Item**"),
    CORR_BISSERIAL = md("**Correlação Ponto-Bisserial**")
  ) |>
  cols_align(
    align = "center", columns = everything()
  ) |>
  fmt_number(
    columns = everything(),
    decimals = 4,
    dec_mark = ","
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

### Alfa de Crombach - Medida de *Consistência Interna (e Parcial) do Teste*

```{r}
#| label: ALFA_CROMBACH

# 1. Calcular o Alfa de Cronbach com todos os itens (Completo)
alpha.cronbach <- psych::alpha(
  df.hits |> select(ends_with("FG") | ends_with("CE")),
  check.keys = TRUE,
  na.rm = TRUE
)
```

```{r}
#| tbl-cap: "Consistência Internado Teste (Geral) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-ALFA_CROMBACH_GERAL

# Visualizar Valor geral
gt(alpha.cronbach$total) |>
  cols_align(align = "center") |>
  fmt_number(
    columns = everything(),
    decimals = 2,
    dec_mark = ","
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(columns = everything())
  )
```

```{r}
#| tbl-cap: "Consistência Parcial - Exclusão de Item a Item - Teste da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-ALFA_CROMBACH_PARCIAL

# Visualizar Valor geral
gt(alpha.cronbach$alpha.drop) |>
  cols_align(align = "center") |>
  fmt_number(
    columns = everything(),
    decimals = 3,
    dec_mark = ","
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(columns = everything())
  )
```

### Resumo das Estatísticas Clássicas da *Teoria Clássica dos Testes* (TCT)

```{r}
#| label: RESUM_STAT_TCT

# -------------------------------------------------------------------------
# [3.9] TABELA DE ESTATÍTICAS CLÁSSICAS DA TEORIA CLÁSSICA DOS TESTES (TCT)
# -------------------------------------------------------------------------

# Construção da Tabela com Estatísticas Clássicas (TCT)
tbl.TCT <- rbind(
  data.frame(
    ITEM = index,
    PROP = tbl.prop_hit$PROP_HIT,
    DISC = tbl.discrimination$`DISCRIMINAÇÃO`,
    CORR = tbl.bisserial$CORR_BISSERIAL
  ) |> slice(1:13) |> mutate(ALFA = alpha.cronbach$alpha.drop$raw_alpha[1:13]) |> rbind(NA),
  data.frame(
    ITEM = index,
    PROP = tbl.prop_hit$PROP_HIT,
    DISC = tbl.discrimination$`DISCRIMINAÇÃO`,
    CORR = tbl.bisserial$CORR_BISSERIAL
  ) |> slice(15:n.itens) |> mutate(ALFA = alpha.cronbach$alpha.drop$raw_alpha[14:(n.itens-1)])
) |> mutate(ITEM = index)
```

```{r}
#| tbl-cap: "Resumo das Estatísticas Clássica da Teoria Clássica dos Testes (TCT) da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-RESUM_STAT_TCT

# Tabela gt
gt(tbl.TCT) |>
  cols_label(
    ITEM = md("**Item**"),
    PROP = md("**Proporção de Acertos (%)**"),
    DISC = md("**Discriminação**"),
    CORR = md("**Correlação Ponto-Bisserial**"),
    ALFA = md("**Alfa de Cronbach**")
  ) |>
  cols_align(align = "center") |>
  fmt_number(
    columns = everything(),
    decimals = 2,
    dec_mark = ","
  )
```

### Análise Gráfica do Desempenho de 5 Grupos na Prova

```{r}
#| label: PLOT_ITEM_ANALIZER

# -----------------------------------
# [3.10] ANÁLISE GRÁFICA DE CADA ITEM
# -----------------------------------

# Número de grupos que se quer analizar
n.gr <- 5

# Criação da Variável de Grupo
df.hits <- df.hits |>
  mutate(
    GRUPO_5 = cut(
      SCORE,
      breaks = quantile(SCORE, probs = seq(0, 1, length.out = n.gr + 1), na.rm = TRUE),
      include.lowest = TRUE,
      labels = paste0("GRUPO ", 1:n.gr)
    )
  )

# Função auxiliar
TCT.plot_item <- function(gr) {
  if (template.oficial[gr] == "ANULADA (E)") {
    return(NULL)   # encerra a função sem erro
  } else {
    # Tabela com proporção por grupo e alternativa
    df.plot <- data.frame(
      GRUPO = df.hits$GRUPO_5,
      RESPOSTA = matrix.resp[, gr]
    ) |>
      filter(RESPOSTA %in% LETTERS[1:5]) |>
      group_by(GRUPO, RESPOSTA) |>
      summarise(N = n(), .groups = "drop") |>
      group_by(GRUPO) |>
      mutate(PROP = N / sum(N)) |>
      ungroup()
    
    # Percentual de acerto geral
    hit.geral <- tbl.prop_hit$PROP_HIT[gr]
    
    # Criação do gráfico
    plott <- ggplot(df.plot, aes(x = GRUPO, y = PROP, group = RESPOSTA, color = RESPOSTA)) +
      geom_line(size = 1) + geom_point(size = 3) +
      ylim(0, 1) +
      geom_text(aes(label = RESPOSTA), vjust = -0.5, size = 3.5) +
      scale_color_manual(
        values = c(
          "A" = "black", 
          "B" = "red",
          "C" = "green",
          "D" = "blue",
          "E" = "cyan"
        )
      ) +
      labs(
        title = paste0("ITEM: ", index[gr]),
        subtitle = paste0("GABARITO: ", template.oficial[gr], " | ACERTO:", round(hit.geral, 2), "%"),
        x = "Grupo de Desempenho",
        y = "Proporção de Acertos"
      ) +
      theme_classic(base_size = 12) +
      theme(
        legend.position = "none", 
        #axis.title = element_text(face = "bold"),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold")
      )
    
    # Visualizar
    print(plott)
  }
}
```

```{r}
#| fig-cap: "Análise de um Item Específico por Grupo de Desempenho discriminando Alternativas da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-PLOT_ITEM_ANALIZER

for (k in 1:n.itens) {
  TCT.plot_item(gr = k)
}
```

## Análise via Teoria de Resposta ao Item (TRI)

### Apresente uma tabela com as estimativas dos parâmetros dos itens

```{r}
#| label: PARAMS_TRI_OPTIM

# Carregar e tratar os parâmetros otimizados
params.itens <- read.table("C:/Users/user/Documents/DETRAN/TRI_PROJECT_DIEGO/TRI_OUTPUTS_SISTEMAS/T1_PARAMS_ITENS.txt", header = T) |>
  mutate(item = index[!ifelse(index == "6ª CE", T, F)]) |>
  select(item, a, b, g, -u)

# Renomaer os rótulos das linhas
rownames(params.itens) <- index[!ifelse(index == "6ª CE", T, F)]
```

```{r}
#| tbl-cap: "Valores dos Parâmetros Estimados dos Itens da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: tbl-PARAMS_TRI_OPTIM

# Tabela com o Pacote gt
gt(params.itens) |>
  cols_align(columns = everything(), align = "center") |>
  cols_label(
    item = md("**Item**"),
    a = md("**Discriminação ($a$)**"), 
    b = md("**Dificuldade ($b$)**"),
    g = md("**Acerto ao Acaso ($c$)**")
  ) |>
  fmt_number(
    columns = everything(),
    decimals = 4,
    sep_mark = ".",
    dec_mark = ","
  ) |>
  tab_source_note(
    source_note = md("FG: Formação Geral; CE: Componente Específico.")
  )
```

Ao anarlizarmos a @tbl-PARAMS_TRI_OPTIM, podemos perceber que os valores dos parâmetros para os itens estão fora dos intervalos esperados. Por exemplo, para o parâmetro de **Discriminação ($a$)**. Era esperado que os valores deste parâmetro estejam entre $[0,5 ; 4,0]$, entretanto tal parâmetro está variando no intervalo [`r min(params.itens$a) |> round(4)`; `r max(params.itens$a) |> round(4)`]. Os itens que apresentaram parâmetro de discriminação fora do intervalo esperado foram: **`r paste0(params.itens |> filter(a < 0.5 | a > 4) |> row.names(), collapse = ", ")`**.

Já do parâmetro de **Dificuldade ($b$)** era esperado que a faixa de valores estivesse dentro do intervalo $[-4 ; 4]$, contudo os valores do parâmetro **$b$** variam no intervalo: [`r min(params.itens$b) |> round(4)`; `r max(params.itens$b) |> round(4)`]. Os itens que se mostraram abaixo do limite inferir esperado correspondem ao: **`r paste0(params.itens |> filter(b < -4 | b > 4) |> row.names(), collapse = ", ")`**.

Por fim, esperava-se que a *probabilidade do indivíduo acertar o item ao acaso* variasse no intervalo $[0 ; 0,35]$. Entretanto essa probabilidade apresentou valor(es) fora do intervalo esperado, como o: **`r paste0(params.itens |> filter(g < 0 | g > 0.35) |> row.names(), collapse = ", ")`**.

### Desenhe um gráfico de dispersão em que os pontos correspondem aos itens, com estimativas dos parâmetros de Dificuldade (x) versus Proporção de Acerto (y). Comente o resultado, sobretudo sobre itens (pontos) destoantes

```{r}
#| fig-cap: "Dificuldade versus Proporção de Acertos dos Itens da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-DIFICULD_VS_HITS_PLOT

bind_cols(
  params.itens,
  tbl.prop_hit |> filter(!is.na(PROP_HIT))
) |>
  select(-c(a, g, ITEM_ESPEC, GABARITO)) |>
  # Gráfico com ggplot2
  ggplot(aes(x = b, y = PROP_HIT)) +
  geom_point(color = "blue", size = 2) +
  geom_smooth(
    formula = "y ~ x", method = "lm", 
    color = "red", fill = "red", alpha = 0.25
  ) +
  geom_text(
    aes(x = b, y = PROP_HIT, label = item), 
    size = 3, vjust = -0.5, 
    fontface = "bold"
  ) +
  labs(x = "Dificuldade", y = "Proporção de Acertos") +
  theme_classic(base_size = 12) +
  theme(
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )
```

### Histograma da Proeficiência ($\theta$) na escala linear: $\theta^{*} = 100 \times \theta + 500$

```{r}
#| fig-cap: "Histograma da Proeficiência dos Participantes da Prova do ENADE para o Curso de Sitemas de Informação."
#| label: fig-HIST_THETA_TRF

# Carregar dados das proeficências
theta.proeficy <- read.table("C:/Users/user/Documents/DETRAN/TRI_PROJECT_DIEGO/TRI_OUTPUTS_SISTEMAS/F1_PROEFICIENCIAS.txt", header = T) |>
  rename(
    theta_score = F1,
    theta_trf = F1.1
  )

# Gráfico com ggplot2
ggplot(data = theta.proeficy, aes(x = theta_trf)) +
  geom_histogram(color = "white", fill = "steelblue") +
  labs(
    x = "Proeficiências Transformadas (Escala Linear)",
    y = "Frqueência"
  ) +
  theme_classic() +
  theme(
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )
```

### Gráfico do Ajuste do Item

```{r}
#| label: CONFIGURATIONS_INIT_PLOT_FIT_ITEM

# Curva Teórica do Item
theoretical.curve <- function(theta, par.a, par.b, par.c) par.c + (1 - par.c) / (1 + exp(-par.a * (theta - par.b)))

# Criando Função para Fazer o Gráfico de Ajuste do Item
plot.fit_item <- function(item_index, theta, responses, params, alpha = 0.05) {
  
  # Quantil da Normal(0, 1)
  z <- qnorm(1 - alpha/2)
  
  # Nome do item
  item_name <- index[!ifelse(index == "6ª CE", T, F)][item_index]
  
  # Respostas do item
  y <- responses[[item_index]]
  
  # Quebras
  breaks <- seq(-3, 3, by = 0.2)
  
  # Categorizar theta
  groups.theta <- cut(theta, breaks = breaks, include.lowest = TRUE)
  
  # Vetor de Parâmetros
  vec.par <- params |> select(-item) |> slice(item_index) |> as.numeric()
  
  # Curva Teórica
  theory.curve <- theoretical.curve(
    theta,
    par.a = vec.par[1],
    par.b = vec.par[2],
    par.c = vec.par[3]
  )
  
  # Data Frame da Curva Teórica
  theory.curve.df <- data.frame(THETA = theta, Pr = theory.curve)
  colnames(theory.curve.df) <- c("THETA", "Pr")
  theory.curve.df <- theory.curve.df |> arrange(THETA)
  
  # Calcular proporção de acertos e intervalo de confiança (binomial)
  data.empirical <- data.frame(THETA = theta, ACERTO = y, GRUPO = groups.theta)
  colnames(data.empirical) <- c("THETA", "ACERTO", "GRUPO")
  data.empirical <- data.empirical |>
    group_by(GRUPO) |>
    summarise(
      n = n(),
      PROP = mean(ACERTO),
      CENTRO = mean(THETA)
    ) |>
    mutate(
      SE = sqrt((PROP * (1 - PROP)) / n)
    ) |>
    mutate(
      LOWER = pmax(0, PROP - z * SE),
      UPPER = pmin(1, PROP + z * SE)
    ) |>
    filter(!is.na(GRUPO))
  
  print(
    # Gráfico de Ajuste do Item com ggplot2
    ggplot() +
      geom_line(
        data = theory.curve.df, aes(x = THETA, y = Pr), 
        color = "blue", size = 1
      ) +
      geom_point(
        data = data.empirical, aes(x = CENTRO, y = PROP), 
        color = "red", size = 2
      ) +
      geom_errorbar(
        data = data.empirical, aes(x = CENTRO, ymin = LOWER, ymax = UPPER), 
        width = 0.1
      ) +
      labs(
        title = paste("Ajuste do Item:", item_name),
        subtitle = paste0(
          "D = 1; a = ", format(round(vec.par[1], 4), big.mark = ".", decimal.mark = ","), 
          "; b = ", format(round(vec.par[2], 4), big.mark = ".", decimal.mark = ","), 
          "; c = ", format(round(vec.par[3], 4), big.mark = ".", decimal.mark = ",")
        ),
        x = bquote("Proeficiências (" ~ theta ~ ")"), 
        y = bquote("Pr(" ~ theta ~ ")")
      ) +
      coord_cartesian(ylim = c(0, 1)) +
      theme_classic(base_size = 12) +
      theme(
        plot.title = element_text(hjust = 0.5, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, face = "bold"),
        axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold")
      )
  )
}
```

A seguir, a @fig-PLOT_FIT_ITEM_1FG_6FG apresenta o gráfico de ajuste do item para dos itens  1ª FG (1), 2ª FG (2), 3ª FG (3), 4ª FG (4), 5ª FG (5) e 6ª FG (6).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 1ª FG a 6ª FG da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 3
#| fig-subcap: 
#| - "1ª FG"
#| - "2ª FG"
#| - "3ª FG"
#| - "4ª FG"
#| - "5ª FG"
#| - "6ª FG"
#| label: fig-PLOT_FIT_ITEM_1FG_6FG

# Item 1ª FG
plot.fit_item(
  item_index = 1,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 2ª FG
plot.fit_item(
  item_index = 2,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 3ª FG
plot.fit_item(
  item_index = 3,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 4ª FG
plot.fit_item(
  item_index = 4,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 5ª FG
plot.fit_item(
  item_index = 5,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 6ª FG
plot.fit_item(
  item_index = 6,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

A seguir, a @fig-PLOT_FIT_ITEM_7FG_4CE apresenta o gráfico de ajuste do item para dos itens  7ª FG (7), 8ª FG (8), 1ª CE (9), 2ª CE (10), 3ª CE (11) e 4ª CE (12).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 7ª FG a 4ª CE da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 3
#| fig-subcap: 
#| - "7ª FG"
#| - "8ª FG"
#| - "1ª CE"
#| - "2ª CE"
#| - "3ª CE"
#| - "4ª CE"
#| label: fig-PLOT_FIT_ITEM_5FG_8FG



# Item 7ª FG
plot.fit_item(
  item_index = 7,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 8ª FG
plot.fit_item(
  item_index = 8,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 1ª CE
plot.fit_item(
  item_index = 9,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 2ª CE
plot.fit_item(
  item_index = 10,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 3ª CE
plot.fit_item(
  item_index = 11,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 4ª CE
plot.fit_item(
  item_index = 12,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

A seguir, a @fig-PLOT_FIT_ITEM_5CE_11CE apresenta o gráfico de ajuste do item para dos itens  5ª CE (13), 7ª CE (15), 8ª CE (16), 9ª CE (17), 10ª CE (18) e 11ª CE (19).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 5ª FG a 11ª CE (6ª foi anulada) da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 3
#| fig-subcap: 
#| - "5ª CE"
#| - "7ª CE"
#| - "8ª CE"
#| - "9ª CE"
#| - "10ª CE"
#| - "11ª CE"
#| label: fig-PLOT_FIT_ITEM_5CE_11CE

# Item 5ª CE
plot.fit_item(
  item_index = 13,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 7ª CE
plot.fit_item(
  item_index = 14,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 8ª CE
plot.fit_item(
  item_index = 15,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 9ª CE
plot.fit_item(
  item_index = 16,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 10ª CE
plot.fit_item(
  item_index = 17,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 11ª CE
plot.fit_item(
  item_index = 18,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

A seguir, a @fig-PLOT_FIT_ITEM_12CE_17CE apresenta o gráfico de ajuste do item para dos itens  12ª CE (20), 13ª CE (21), 14ª CE (22), 15ª CE (23), 16ª CE (24) e 17ª CE (25).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 12ª FG a 17ª CE da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 3
#| fig-subcap: 
#| - "12ª CE"
#| - "13ª CE"
#| - "14ª CE"
#| - "15ª CE"
#| - "16ª CE"
#| - "17ª CE"
#| label: fig-PLOT_FIT_ITEM_12CE_17CE

# Item 12ª CE
plot.fit_item(
  item_index = 19,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 13ª CE
plot.fit_item(
  item_index = 20,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 14ª CE
plot.fit_item(
  item_index = 21,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 15ª CE
plot.fit_item(
  item_index = 22,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 16ª CE
plot.fit_item(
  item_index = 23,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 17ª CE
plot.fit_item(
  item_index = 24,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

A seguir, a @fig-PLOT_FIT_ITEM_18CE_23CE apresenta o gráfico de ajuste do item para dos itens  18ª CE (26), 19ª CE (27), 20ª CE (28), 21ª CE (29), 22ª CE (30) e 23ª CE (31).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 18ª FG a 23ª CE da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 3
#| fig-subcap: 
#| - "18ª CE"
#| - "19ª CE"
#| - "20ª CE"
#| - "21ª CE"
#| - "22ª CE"
#| - "23ª CE"
#| label: fig-PLOT_FIT_ITEM_18CE_23CE

# Item 12ª CE
plot.fit_item(
  item_index = 25,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 13ª CE
plot.fit_item(
  item_index = 26,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 14ª CE
plot.fit_item(
  item_index = 27,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 15ª CE
plot.fit_item(
  item_index = 28,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 16ª CE
plot.fit_item(
  item_index = 29,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 17ª CE
plot.fit_item(
  item_index = 30,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

A seguir, a @fig-PLOT_FIT_ITEM_24CE_27CE apresenta o gráfico de ajuste do item para dos itens  24ª CE (32), 25ª CE (33), 26ª CE (34), 27ª CE (35).

```{r}
#| fig-cap: "Gráfico do Ajuste dos Itens 24ª FG a 27ª CE da Prova do ENADE para o Curso de Sitemas de Informação."
#| layout-nrow: 2
#| layout-ncol: 2
#| fig-subcap: 
#| - "24ª CE"
#| - "25ª CE"
#| - "26ª CE"
#| - "27ª CE"
#| label: fig-PLOT_FIT_ITEM_24CE_27CE

# Item 24ª CE
plot.fit_item(
  item_index = 31,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 25ª CE
plot.fit_item(
  item_index = 32,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 26ª CE
plot.fit_item(
  item_index = 33,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)

# Item 27ª CE
plot.fit_item(
  item_index = 34,
  theta = theta.proeficy$theta_score,
  responses = matrix.hits,
  params = params.itens
)
```

### Proporção de Alternativas por Proeficiência

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::